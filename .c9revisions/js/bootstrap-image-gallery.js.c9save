{"ts":1358218238877,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/*\n * Bootstrap Image Gallery 2.10\n * https://github.com/blueimp/Bootstrap-Image-Gallery\n *\n * Copyright 2011, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * http://www.opensource.org/licenses/MIT\n */\n\n/*jslint nomen: true, regexp: true */\n/*global define, window, document, jQuery */\n\n(function (factory) {\n    'use strict';\n    if (typeof define === 'function' && define.amd) {\n        // Register as an anonymous AMD module:\n        define([\n            'jquery',\n            'load-image',\n            'bootstrap'\n        ], factory);\n    } else {\n        // Browser globals:\n        factory(\n            window.jQuery,\n            window.loadImage\n        );\n    }\n}(function ($, loadImage) {\n    'use strict';\n    // Bootstrap Image Gallery is an extension to the Modal dialog of Twitter's\n    // Bootstrap toolkit, to ease navigation between a set of gallery images.\n    // It features transition effects, fullscreen mode and slideshow functionality.\n    $.extend($.fn.modal.defaults, {\n        // Delegate to search gallery links from, can be anything that\n        // is accepted as parameter for $():\n        delegate: document,\n        // Selector for gallery links:\n        selector: null,\n        // The filter for the selected gallery links (e.g. set to \":odd\" to\n        // filter out label and thumbnail linking twice to the same image):\n        filter: '*',\n        // The index of the first gallery image to show:\n        index: 0,\n        // The href of the first gallery image to show (overrides index):\n        href: null,\n        // The range of images around the current one to preload:\n        preloadRange: 2,\n        // Offset of image width to viewport width:\n        offsetWidth: 100,\n        // Offset of image height to viewport height:\n        offsetHeight: 200,\n        // Set to true to display images as canvas elements:\n        canvas: false,\n        // Shows the next image after the given time in ms (0 = disabled):\n        slideshow: 0,\n        // Defines the image division for previous/next clicks:\n        imageClickDivision: 0.5\n    });\n    var originalShow = $.fn.modal.Constructor.prototype.show,\n        originalHide = $.fn.modal.Constructor.prototype.hide;\n    $.extend($.fn.modal.Constructor.prototype, {\n        initLinks: function () {\n            var $this = this,\n                options = this.options,\n                selector = options.selector ||\n                    'a[data-target=' + options.target + ']';\n            this.$links = $(options.delegate).find(selector)\n                .filter(options.filter).each(function (index) {\n                    if ($this.getUrl(this) === options.href) {\n                        options.index = index;\n                    }\n                });\n            if (!this.$links[options.index]) {\n                options.index = 0;\n            }\n        },\n        getUrl: function (element) {\n            return element.href || $(element).data('href');\n        },\n        getDownloadUrl: function (element) {\n            return $(element).data('download');\n        },\n        startSlideShow: function () {\n            var $this = this;\n            if (this.options.slideshow) {\n                this._slideShow = window.setTimeout(\n                    function () {\n                        $this.next();\n                    },\n                    this.options.slideshow\n                );\n            }\n        },\n        stopSlideShow: function () {\n            window.clearTimeout(this._slideShow);\n        },\n        toggleSlideShow: function () {\n            var node = this.$element.find('.modal-slideshow');\n            if (this.options.slideshow) {\n                this.options.slideshow = 0;\n                this.stopSlideShow();\n            } else {\n                this.options.slideshow = node.data('slideshow') || 5000;\n                this.startSlideShow();\n            }\n            node.find('i').toggleClass('icon-play icon-pause');\n        },\n        preloadImages: function () {\n            var options = this.options,\n                range = options.index + options.preloadRange + 1,\n                link,\n                i;\n            for (i = options.index - options.preloadRange; i < range; i += 1) {\n                link = this.$links[i];\n                if (link && i !== options.index) {\n                    $('<img>').prop('src', this.getUrl(link));\n                }\n            }\n        },\n        loadImage: function () {\n            var $this = this,\n                modal = this.$element,\n                index = this.options.index,\n                url = this.getUrl(this.$links[index]),\n                download = this.getDownloadUrl(this.$links[index]),\n                oldImg;\n            this.abortLoad();\n            this.stopSlideShow();\n            modal.trigger('beforeLoad');\n            // The timeout prevents displaying a loading status,\n            // if the image has already been loaded:\n            this._loadingTimeout = window.setTimeout(function () {\n                modal.addClass('modal-loading');\n            }, 100);\n            oldImg = modal.find('.modal-image').children().removeClass('in');\n            // The timeout allows transition effects to finish:\n            window.setTimeout(function () {\n                oldImg.remove();\n            }, 3000);\n            modal.find('.modal-title').text(this.$links[index].title);\n            modal.find('.modal-download').prop(\n                'href',\n                download || url\n            );\n            this._loadingImage = loadImage(\n                url,\n                function (img) {\n                    $this.img = img;\n                    window.clearTimeout($this._loadingTimeout);\n                    modal.removeClass('modal-loading');\n                    modal.trigger('load');\n                    $this.showImage(img);\n                    $this.startSlideShow();\n                },\n                this._loadImageOptions\n            );\n            this.preloadImages();\n        },\n        showImage: function (img) {\n            var modal = this.$element,\n                transition = $.support.transition && modal.hasClass('fade'),\n                method = transition ? modal.animate : modal.css,\n                modalImage = modal.find('.modal-image'),\n                clone,\n                forceReflow;\n            modalImage.css({\n                width: img.width,\n                height: img.height\n            });\n            modal.find('.modal-title').css({ width: Math.max(img.width, 380) });\n            if (transition) {\n                clone = modal.clone().hide().appendTo(document.body);\n            }\n            if ($(window).width() > 767) {\n                method.call(modal.stop(), {\n                    'margin-top': -((clone || modal).outerHeight() / 2),\n                    'margin-left': -((clone || modal).outerWidth() / 2)\n                });\n            } else {\n                modal.css({\n                    top: ($(window).height() - (clone || modal).outerHeight()) / 2\n                });\n            }\n            if (clone) {\n                clone.remove();\n            }\n            modalImage.append(img);\n            forceReflow = img.offsetWidth;\n            modal.trigger('display');\n            if (transition) {\n                if (modal.is(':visible')) {\n                    $(img).on(\n                        $.support.transition.end,\n                        function (e) {\n                            // Make sure we don't respond to other transitions events\n                            // in the container element, e.g. from button elements:\n                            if (e.target === img) {\n                                $(img).off($.support.transition.end);\n                                modal.trigger('displayed');\n                            }\n                        }\n                    ).addClass('in');\n                } else {\n                    $(img).addClass('in');\n                    modal.one('shown', function () {\n                        modal.trigger('displayed');\n                    });\n                }\n            } else {\n                $(img).addClass('in');\n                modal.trigger('displayed');\n            }\n        },\n        abortLoad: function () {\n            if (this._loadingImage) {\n                this._loadingImage.onload = this._loadingImage.onerror = null;\n            }\n            window.clearTimeout(this._loadingTimeout);\n        },\n        prev: function () {\n            var options = this.options;\n            options.index -= 1;\n            if (options.index < 0) {\n                options.index = this.$links.length - 1;\n            }\n            this.loadImage();\n        },\n        next: function () {\n            var options = this.options;\n            options.index += 1;\n            if (options.index > this.$links.length - 1) {\n                options.index = 0;\n            }\n            this.loadImage();\n        },\n        keyHandler: function (e) {\n            switch (e.which) {\n            case 37: // left\n            case 38: // up\n                e.preventDefault();\n                this.prev();\n                break;\n            case 39: // right\n            case 40: // down\n                e.preventDefault();\n                this.next();\n                break;\n            }\n        },\n        wheelHandler: function (e) {\n            e.preventDefault();\n            e = e.originalEvent;\n            this._wheelCounter = this._wheelCounter || 0;\n            this._wheelCounter += (e.wheelDelta || e.detail || 0);\n            if ((e.wheelDelta && this._wheelCounter >= 120) ||\n                    (!e.wheelDelta && this._wheelCounter < 0)) {\n                this.prev();\n                this._wheelCounter = 0;\n            } else if ((e.wheelDelta && this._wheelCounter <= -120) ||\n                        (!e.wheelDelta && this._wheelCounter > 0)) {\n                this.next();\n                this._wheelCounter = 0;\n            }\n        },\n        initGalleryEvents: function () {\n            var $this = this,\n                modal = this.$element;\n            modal.find('.modal-image').on('click.modal-gallery', function (e) {\n                var modalImage = $(this);\n                if ($this.$links.length === 1) {\n                    $this.hide();\n                } else {\n                    if ((e.pageX - modalImage.offset().left) / modalImage.width() <\n                            $this.options.imageClickDivision) {\n                        $this.prev(e);\n                    } else {\n                        $this.next(e);\n                    }\n                }\n            });\n            modal.find('.modal-prev').on('click.modal-gallery', function (e) {\n                $this.prev(e);\n            });\n            modal.find('.modal-next').on('click.modal-gallery', function (e) {\n                $this.next(e);\n            });\n            modal.find('.modal-slideshow').on('click.modal-gallery', function (e) {\n                $this.toggleSlideShow(e);\n            });\n            $(document)\n                .on('keydown.modal-gallery', function (e) {\n                    $this.keyHandler(e);\n                })\n                .on(\n                    'mousewheel.modal-gallery, DOMMouseScroll.modal-gallery',\n                    function (e) {\n                        $this.wheelHandler(e);\n                    }\n                );\n        },\n        destroyGalleryEvents: function () {\n            var modal = this.$element;\n            this.abortLoad();\n            this.stopSlideShow();\n            modal.find('.modal-image, .modal-prev, .modal-next, .modal-slideshow')\n                .off('click.modal-gallery');\n            $(document)\n                .off('keydown.modal-gallery')\n                .off('mousewheel.modal-gallery, DOMMouseScroll.modal-gallery');\n        },\n        show: function () {\n            if (!this.isShown && this.$element.hasClass('modal-gallery')) {\n                var modal = this.$element,\n                    options = this.options,\n                    windowWidth = $(window).width(),\n                    windowHeight = $(window).height();\n                if (modal.hasClass('modal-fullscreen')) {\n                    this._loadImageOptions = {\n                        maxWidth: windowWidth,\n                        maxHeight: windowHeight,\n                        canvas: options.canvas\n                    };\n                    if (modal.hasClass('modal-fullscreen-stretch')) {\n                        this._loadImageOptions.minWidth = windowWidth;\n                        this._loadImageOptions.minHeight = windowHeight;\n                    }\n                } else {\n                    this._loadImageOptions = {\n                        maxWidth: windowWidth - options.offsetWidth,\n                        maxHeight: windowHeight - options.offsetHeight,\n                        canvas: options.canvas\n                    };\n                }\n                if (windowWidth > 767) {\n                    modal.css({\n                        'margin-top': -(modal.outerHeight() / 2),\n                        'margin-left': -(modal.outerWidth() / 2)\n                    });\n                } else {\n                    modal.css({\n                        top: ($(window).height() - modal.outerHeight()) / 2\n                    });\n                }\n                this.initGalleryEvents();\n                this.initLinks();\n                if (this.$links.length) {\n                    modal.find('.modal-slideshow, .modal-prev, .modal-next')\n                        .toggle(this.$links.length !== 1);\n                    modal.toggleClass(\n                        'modal-single',\n                        this.$links.length === 1\n                    );\n                    this.loadImage();\n                }\n            }\n            originalShow.apply(this, arguments);\n        },\n        hide: function () {\n            if (this.isShown && this.$element.hasClass('modal-gallery')) {\n                this.options.delegate = document;\n                this.options.href = null;\n                this.destroyGalleryEvents();\n            }\n            originalHide.apply(this, arguments);\n        }\n    });\n    $(function () {\n        $(document.body).on(\n            'click.modal-gallery.data-api',\n            '[data-toggle=\"modal-gallery\"]',\n            function (e) {\n                var $this = $(this),\n                    options = $this.data(),\n                    modal = $(options.target),\n                    data = modal.data('modal'),\n                    link;\n                if (!data) {\n                    options = $.extend(modal.data(), options);\n                }\n                if (!options.selector) {\n                    options.selector = 'a[data-gallery=gallery]';\n                }\n                link = $(e.target).closest(options.selector);\n                if (link.length && modal.length) {\n                    e.preventDefault();\n                    options.href = link.prop('href') || link.data('href');\n                    options.delegate = link[0] !== this ? this : document;\n                    if (data) {\n                        $.extend(data.options, options);\n                    }\n                    modal.modal(options);\n                }\n            }\n        );\n    });\n}));\n"]],"start1":0,"start2":0,"length1":0,"length2":15357}]],"length":15357}
